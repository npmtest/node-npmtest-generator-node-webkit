{"/home/travis/build/npmtest/node-npmtest-generator-node-webkit/test.js":"/* istanbul instrument in package npmtest_generator_node_webkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-node-webkit/lib.npmtest_generator_node_webkit.js":"/* istanbul instrument in package npmtest_generator_node_webkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_node_webkit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_node_webkit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-node-webkit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-node-webkit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_node_webkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_node_webkit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_node_webkit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_node_webkit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_node_webkit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_node_webkit.__dirname + '/lib.npmtest_generator_node_webkit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-node-webkit/node_modules/generator-node-webkit/app/index.js":"/*global require*/\n'use strict';\n\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar url = require('url');\nvar GitHubApi = require('github');\nvar _ = require('lodash');\nvar readFileAsString = require(\"html-wiring\").readFileAsString;\n\nvar Examples = require('./examples.js');\n\nvar NodeWebkitGenerator = module.exports = function NodeWebkitGenerator(args, options) {\n  yeoman.generators.Base.apply(this, arguments);\n\n  this.on('end', function () {\n    this.installDependencies({\n      skipInstall: options['skip-install']\n    });\n  });\n\n  this.pkg = JSON.parse(readFileAsString(path.join(__dirname, '../package.json')));\n  this.github = false;\n};\n\nutil.inherits(NodeWebkitGenerator, yeoman.generators.Base);\n\nNodeWebkitGenerator.prototype.welcome = function welcome() {\n  if (!this.options['skip-welcome-message']) {\n    console.log(this.yeoman);\n  }\n};\n\nNodeWebkitGenerator.prototype.askForAppName = function askForAppName() {\n  var done = this.async();\n  var basePath = path.basename(process.env.PWD);\n  var appName = _.camelCase(basePath);\n\n  var prompts = [{\n    name: 'appName',\n    message: 'What do you want to call your app? Allowed characters ^[a-zA-Z0-9]+$',\n    default: appName,\n    validate: function (answer) {\n      if (!/^[a-zA-Z0-9]+$/.test(answer)) {\n        return 'The application name should only consist of the following characters a-z, A-Z and 0-9.';\n      }\n      return true;\n    }\n  }];\n\n  this.prompt(prompts, function (props) {\n    this.appName = props.appName;\n    done();\n  }.bind(this));\n\n};\n\nNodeWebkitGenerator.prototype.askForDescription = function askForDescription() {\n  var done = this.async();\n  var prompts = [{\n    name: 'appDescription',\n    message: 'A little description for your app?'\n  }];\n\n  this.prompt(prompts, function (props) {\n    this.appDescription = props.appDescription;\n    done();\n  }.bind(this));\n\n};\n\nNodeWebkitGenerator.prototype.askForGithubName = function askForGithubName() {\n  var done = this.async();\n  var prompts = [{\n    name: 'githubUser',\n    message: 'Would you mind telling me your username on GitHub?',\n    default: 'someuser'\n  }];\n\n  this.prompt(prompts, function (props) {\n    this.githubUser = props.githubUser;\n    done();\n  }.bind(this));\n};\n\nNodeWebkitGenerator.prototype.askForInstallExamples = function askForInstallExamples() {\n  var done = this.async();\n  var prompts = [{\n    type: 'confirm',\n    name: 'installExamples',\n    message: 'Do you want to install one of the node-webkit examples?',\n    default: false\n  }];\n  this.prompt(prompts, function (props) {\n    this.installExamples = props.installExamples;\n    done();\n  }.bind(this));\n\n};\n\nNodeWebkitGenerator.prototype.getGithubUserInfo = function getGithubUserInfo() {\n  var done = this.async();\n  var _this = this;\n  var responseClbk = function (err, responseText) {\n    if (err) {\n      _this.log.info('Error while fetching github user information.', err);\n      _this.log.skip('Skip fetching github user information.');\n      done();\n    } else {\n      var responseObject = JSON.parse(JSON.stringify(responseText));\n      _this.log.ok('Github informations successfully retrieved.');\n      _this.github = true;\n      _this.realname = responseObject.name;\n      _this.githubUrl = responseObject.html_url;\n      done();\n    }\n  };\n\n  if (this.githubUser !== 'someuser') {\n    var proxy = process.env.http_proxy || process.env.HTTP_PROXY || process.env.https_proxy || process.env.HTTPS_PROXY || null;\n    var githubOptions = {\n      version: '3.0.0'\n    };\n\n    if (proxy) {\n      githubOptions.proxy = {};\n      githubOptions.proxy.host = url.parse(proxy).hostname;\n      githubOptions.proxy.port = url.parse(proxy).port;\n    }\n\n    var github = new GitHubApi(githubOptions);\n    this.log.info('Get GitHub informations');\n    github.user.getFrom({\n      user: this.githubUser\n    }, responseClbk);\n  } else {\n    done();\n  }\n};\n\nNodeWebkitGenerator.prototype.getExampleList = function getExampleList() {\n  var done = this.async();\n  if (this.installExamples) {\n    var prompts = [{\n      type: 'list',\n      name: 'example',\n      message: 'Which example do you want to install?',\n      choices: []\n    }];\n\n    this.examplesAPI = new Examples(this);\n    this.log.info('Getting list of available examples.');\n    this.examplesAPI.getExampleList()\n      .then(function (list) {\n        prompts[0].choices = list;\n\n        this.prompt(prompts, function (props) {\n          this.example = props.example;\n          done();\n        }.bind(this));\n      }.bind(this));\n  } else {\n    done();\n  }\n};\n\nNodeWebkitGenerator.prototype.nodeWebkitSubgenerator = function createFolder() {\n  var done = this.async();\n  this.invoke(\"node-webkit:download\", {}, function () {\n    done();\n  });\n};\n\nNodeWebkitGenerator.prototype.processProjectfiles = function processProjectfiles() {\n  this.copy('editorconfig', '.editorconfig');\n  this.copy('jshintrc', '.jshintrc');\n  this.copy('gitignore', '.gitignore');\n  this.copy('_bower.json', 'bower.json');\n  this.copy('mac/dmgStyler.applescript', 'resources/mac/dmgStyler.applescript');\n  this.copy('mac/package.sh', 'resources/mac/package.sh');\n  this.copy('mac/background.png', 'resources/mac/background.png');\n  this.template('_package.json', 'package.json');\n  this.template('_Gruntfile.js', 'Gruntfile.js');\n  this.template('mac/_Info.plist.tmp', 'resources/mac/Info.plist.tmp');\n};\n\nNodeWebkitGenerator.prototype.processAppFiles = function processAppFiles() {\n  var done = this.async();\n  if (this.installExamples) {\n    this.examplesAPI.downloadAndInstallExamples(this.example)\n      .then(function() {\n        done();\n      });\n  } else {\n    this.copy('app/_main.css', 'app/css/main.css');\n    this.copy('app/_index.js', 'app/js/index.js');\n    this.template('app/_package.json', 'app/package.json');\n    this.template('app/_index.html', 'app/views/index.html');\n    done();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-node-webkit/node_modules/generator-node-webkit/app/examples.js":"var when = require('when');\nvar GitHubApi = require('github');\nvar request = require('request');\nvar fs = require('fs-extra');\nvar DecompressZip = require('decompress-zip');\nvar url = require('url');\n\nvar proxy = process.env.http_proxy || process.env.HTTP_PROXY || process.env.https_proxy || process.env.HTTPS_PROXY || null;\nvar githubOptions = {\n  version: '3.0.0'\n};\n\nif (proxy) {\n  githubOptions.proxy = {};\n  githubOptions.proxy.host = url.parse(proxy).hostname;\n  githubOptions.proxy.port = url.parse(proxy).port;\n}\n\nvar github = new GitHubApi(githubOptions);\n\nfunction Examples(yeoman) {\n  this.yeoman = yeoman;\n  this.entries = [];\n}\n\nExamples.prototype.getExamplesOverview = function () {\n  var defer = when.defer();\n  github.gitdata.getTree({\n      'user': 'zcbenz',\n      'repo': 'nw-sample-apps',\n      'sha': 'master'\n    },\n    function (err, resp) {\n      defer.resolve(resp);\n    }\n  );\n  return defer.promise;\n};\n\nExamples.prototype.getExampleList = function () {\n  var _this = this;\n  var defer = when.defer();\n  this.getExamplesOverview()\n    .then(function (resp) {\n      var list = [];\n      resp.tree.forEach(function (treeEntry) {\n        if ('tree' === treeEntry.type) {\n          list.push(treeEntry.path);\n          _this.entries.push(treeEntry);\n        }\n      });\n      defer.resolve(list);\n    });\n  return defer.promise;\n};\n\nExamples.prototype.downloadAndInstallExamples = function downloadAndInstallExamples(example) {\n  this.example = example;\n  var defer = when.defer();\n\n  this.downloadExamples()\n    .then(this.unzipExamples.bind(this))\n    .then(this.installExamples.bind(this))\n    .then(function () {\n      defer.resolve();\n    });\n\n  return defer.promise;\n};\n\nExamples.prototype.downloadExamples = function downloadExamples() {\n  var defer = when.defer();\n  var _this = this;\n  if (!fs.existsSync('tmp/node-webkit-examples.zip')) {\n    this.yeoman.log.info('Downloading node-webkit examples');\n\n    var writeStream = fs.createWriteStream('tmp/node-webkit-examples.zip');\n    var req = request('https://github.com/zcbenz/nw-sample-apps/archive/master.zip')\n      .pipe(writeStream);\n    req.on('error', function (err) {\n      _this.yeoman.log.conflict(err);\n    });\n    writeStream.on('finish', function () {\n      defer.resolve();\n    });\n\n  } else {\n    this.yeoman.log.ok('Node-webkit examples already downloaded');\n    defer.resolve();\n  }\n  return defer.promise;\n};\n\nExamples.prototype.unzipExamples = function unzipExamples() {\n  var defer = when.defer();\n  var _this = this;\n  if (fs.existsSync('tmp/node-webkit-examples.zip')) {\n    this.yeoman.log.info('Unzip examples.');\n    var unzipper = new DecompressZip('tmp/node-webkit-examples.zip');\n\n    unzipper.on('error', function (error) {\n      _this.yeoman.log.conflict('Error while unzipping \"tmp/node-webkit-examples.zip\"', error);\n      defer.reject(error);\n    });\n\n    unzipper.on('extract', function () {\n      _this.yeoman.log.ok('Examples successfully unzipped');\n      defer.resolve();\n    });\n\n    unzipper.extract({\n      path: 'tmp'\n    });\n  } else {\n    defer.resolve();\n  }\n  return defer.promise;\n};\n\nExamples.prototype.installExamples = function installExamples() {\n  var _this = this;\n  var defer = when.defer();\n  fs.copy('tmp/nw-sample-apps-master/' + this.example, 'app', function (err) {\n    if (err) {\n      _this.yeoman.log.conflict('Error while copying example', err);\n      defer.reject(err);\n    }\n    defer.resolve();\n  });\n  return defer.promise;\n};\n\nmodule.exports = Examples;\n","/home/travis/build/npmtest/node-npmtest-generator-node-webkit/node_modules/generator-node-webkit/app/templates/_Gruntfile.js":"/*jshint camelcase: false*/\n\nmodule.exports = function (grunt) {\n  'use strict';\n\n  // load all grunt tasks\n  require('time-grunt')(grunt);\n  require('load-grunt-tasks')(grunt);\n\n  // configurable paths\n  var config = {\n    app: 'app',\n    dist: 'dist',\n    distMac32: 'dist/macOS',\n    distMac64: 'dist/macOS',\n    distLinux32: 'dist/Linux32',\n    distLinux64: 'dist/Linux64',\n    distWin: 'dist/Win',\n    tmp: 'buildTmp',\n    resources: 'resources'\n  };\n\n  grunt.initConfig({\n    config: config,\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.dist %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      },\n      distMac32: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.distMac32 %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      },\n      distMac64: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.distMac64 %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      },\n      distLinux64: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.distLinux64 %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      },\n      distLinux32: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.distLinux32 %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      },\n      distWin: {\n        files: [{\n          dot: true,\n          src: [\n            '<%%= config.distWin %>/*',\n            '<%%= config.tmp %>/*'\n          ]\n        }]\n      }\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      files: '<%%= config.app %>/js/*.js'\n    },\n    copy: {\n      appLinux: {\n        files: [{\n          expand: true,\n          cwd: '<%%= config.app %>',\n          dest: '<%%= config.distLinux64 %>/app.nw',\n          src: '**'\n        }]\n      },\n      appLinux32: {\n        files: [{\n          expand: true,\n          cwd: '<%%= config.app %>',\n          dest: '<%%= config.distLinux32 %>/app.nw',\n          src: '**'\n        }]\n      },\n      appMacos32: {\n        files: [{\n          expand: true,\n          cwd: '<%%= config.app %>',\n          dest: '<%%= config.distMac32 %>/node-webkit.app/Contents/Resources/app.nw',\n          src: '**'\n        }, {\n          expand: true,\n          cwd: '<%%= config.resources %>/mac/',\n          dest: '<%%= config.distMac32 %>/node-webkit.app/Contents/',\n          filter: 'isFile',\n          src: '*.plist'\n        }, {\n          expand: true,\n          cwd: '<%%= config.resources %>/mac/',\n          dest: '<%%= config.distMac32 %>/node-webkit.app/Contents/Resources/',\n          filter: 'isFile',\n          src: '*.icns'\n        }, {\n          expand: true,\n          cwd: '<%%= config.app %>/../node_modules/',\n          dest: '<%%= config.distMac32 %>/node-webkit.app/Contents/Resources/app.nw/node_modules/',\n          src: '**'\n        }]\n      },\n      appMacos64: {\n        files: [{\n          expand: true,\n          cwd: '<%%= config.app %>',\n          dest: '<%%= config.distMac64 %>/node-webkit.app/Contents/Resources/app.nw',\n          src: '**'\n        }, {\n          expand: true,\n          cwd: '<%%= config.resources %>/mac/',\n          dest: '<%%= config.distMac64 %>/node-webkit.app/Contents/',\n          filter: 'isFile',\n          src: '*.plist'\n        }, {\n          expand: true,\n          cwd: '<%%= config.resources %>/mac/',\n          dest: '<%%= config.distMac64 %>/node-webkit.app/Contents/Resources/',\n          filter: 'isFile',\n          src: '*.icns'\n        }, {\n          expand: true,\n          cwd: '<%%= config.app %>/../node_modules/',\n          dest: '<%%= config.distMac64 %>/node-webkit.app/Contents/Resources/app.nw/node_modules/',\n          src: '**'\n        }]\n      },\n      webkit32: {\n        files: [{\n          expand: true,\n          cwd: '<%%=config.resources %>/node-webkit/MacOS32',\n          dest: '<%%= config.distMac32 %>/',\n          src: '**'\n        }]\n      },\n      webkit64: {\n        files: [{\n          expand: true,\n          cwd: '<%%=config.resources %>/node-webkit/MacOS64',\n          dest: '<%%= config.distMac64 %>/',\n          src: '**'\n        }]\n      },\n      copyWinToTmp: {\n        files: [{\n          expand: true,\n          cwd: '<%%= config.resources %>/node-webkit/Windows/',\n          dest: '<%%= config.tmp %>/',\n          src: '**'\n        }]\n      }\n    },\n    compress: {\n      appToTmp: {\n        options: {\n          archive: '<%%= config.tmp %>/app.zip'\n        },\n        files: [{\n          expand: true,\n          cwd: '<%%= config.app %>',\n          src: ['**']\n        }]\n      },\n      finalWindowsApp: {\n        options: {\n          archive: '<%%= config.distWin %>/<%= appName %>.zip'\n        },\n        files: [{\n          expand: true,\n          cwd: '<%%= config.tmp %>',\n          src: ['**']\n        }]\n      }\n    },\n    rename: {\n      macApp32: {\n        files: [{\n          src: '<%%= config.distMac32 %>/node-webkit.app',\n          dest: '<%%= config.distMac32 %>/<%= appName %>.app'\n        }]\n      },\n      macApp64: {\n        files: [{\n          src: '<%%= config.distMac64 %>/node-webkit.app',\n          dest: '<%%= config.distMac64 %>/<%= appName %>.app'\n        }]\n      },\n      zipToApp: {\n        files: [{\n          src: '<%%= config.tmp %>/app.zip',\n          dest: '<%%= config.tmp %>/app.nw'\n        }]\n      }\n    }\n  });\n\n  grunt.registerTask('chmod32', 'Add lost Permissions.', function () {\n    var fs = require('fs'),\n      path = config.distMac32 + '/<%= appName %>.app/Contents/';\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper EH.app/Contents/MacOS/node-webkit Helper EH')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper EH.app/Contents/MacOS/node-webkit Helper EH', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper EH.app/Contents/MacOS/nwjs Helper EH', '555');\n    }\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper NP.app/Contents/MacOS/node-webkit Helper NP')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper NP.app/Contents/MacOS/node-webkit Helper NP', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper NP.app/Contents/MacOS/nwjs Helper NP', '555');\n    }\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper.app/Contents/MacOS/node-webkit Helper')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper.app/Contents/MacOS/node-webkit Helper', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper.app/Contents/MacOS/nwjs Helper', '555');\n    }\n    if (fs.existsSync(path + 'MacOS/node-webkit')) {\n      fs.chmodSync(path + 'MacOS/node-webkit', '555');\n    } else {\n      fs.chmodSync(path + 'MacOS/nwjs', '555');\n    }\n  });\n\n  grunt.registerTask('chmod64', 'Add lost Permissions.', function () {\n    var fs = require('fs'),\n      path = config.distMac64 + '/<%= appName %>.app/Contents/';\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper EH.app/Contents/MacOS/node-webkit Helper EH')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper EH.app/Contents/MacOS/node-webkit Helper EH', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper EH.app/Contents/MacOS/nwjs Helper EH', '555');\n    }\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper NP.app/Contents/MacOS/node-webkit Helper NP')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper NP.app/Contents/MacOS/node-webkit Helper NP', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper NP.app/Contents/MacOS/nwjs Helper NP', '555');\n    }\n    if (fs.existsSync(path + 'Frameworks/node-webkit Helper.app/Contents/MacOS/node-webkit Helper')) {\n      fs.chmodSync(path + 'Frameworks/node-webkit Helper.app/Contents/MacOS/node-webkit Helper', '555');\n    } else {\n      fs.chmodSync(path + 'Frameworks/nwjs Helper.app/Contents/MacOS/nwjs Helper', '555');\n    }\n    if (fs.existsSync(path + 'MacOS/node-webkit')) {\n      fs.chmodSync(path + 'MacOS/node-webkit', '555');\n    } else {\n      fs.chmodSync(path + 'MacOS/nwjs', '555');\n    }\n  });\n\n  grunt.registerTask('createLinuxApp', 'Create linux distribution.', function (version) {\n    var done = this.async();\n    var childProcess = require('child_process');\n    var exec = childProcess.exec;\n    var path = './' + (version === 'Linux64' ? config.distLinux64 : config.distLinux32);\n    exec('mkdir -p ' + path + '; cp resources/node-webkit/' + version + '/nw.pak ' + path + ' && cp resources/node-webkit/' + version + '/nw ' + path + '/node-webkit && cp resources/node-webkit/' + version + '/icudtl.dat ' + path + '/icudtl.dat', function (error, stdout, stderr) {\n      var result = true;\n      if (stdout) {\n        grunt.log.write(stdout);\n      }\n      if (stderr) {\n        grunt.log.write(stderr);\n      }\n      if (error !== null) {\n        grunt.log.error(error);\n        result = false;\n      }\n      done(result);\n    });\n  });\n\n  grunt.registerTask('createWindowsApp', 'Create windows distribution.', function () {\n    var done = this.async();\n    var concat = require('concat-files');\n    concat([\n      'buildTmp/nw.exe',\n      'buildTmp/app.nw'\n    ], 'buildTmp/<%= appName %>.exe', function () {\n      var fs = require('fs');\n      fs.unlink('buildTmp/app.nw', function (error, stdout, stderr) {\n        if (stdout) {\n          grunt.log.write(stdout);\n        }\n        if (stderr) {\n          grunt.log.write(stderr);\n        }\n        if (error !== null) {\n          grunt.log.error(error);\n          done(false);\n        } else {\n          fs.unlink('buildTmp/nw.exe', function (error, stdout, stderr) {\n            var result = true;\n            if (stdout) {\n              grunt.log.write(stdout);\n            }\n            if (stderr) {\n              grunt.log.write(stderr);\n            }\n            if (error !== null) {\n              grunt.log.error(error);\n              result = false;\n            }\n            done(result);\n          });\n        }\n      });\n    });\n  });\n\n  grunt.registerTask('setVersion', 'Set version to all needed files', function (version) {\n    var config = grunt.config.get(['config']);\n    var appPath = config.app;\n    var resourcesPath = config.resources;\n    var mainPackageJSON = grunt.file.readJSON('package.json');\n    var appPackageJSON = grunt.file.readJSON(appPath + '/package.json');\n    var infoPlistTmp = grunt.file.read(resourcesPath + '/mac/Info.plist.tmp', {\n      encoding: 'UTF8'\n    });\n    var infoPlist = grunt.template.process(infoPlistTmp, {\n      data: {\n        version: version\n      }\n    });\n    mainPackageJSON.version = version;\n    appPackageJSON.version = version;\n    grunt.file.write('package.json', JSON.stringify(mainPackageJSON, null, 2), {\n      encoding: 'UTF8'\n    });\n    grunt.file.write(appPath + '/package.json', JSON.stringify(appPackageJSON, null, 2), {\n      encoding: 'UTF8'\n    });\n    grunt.file.write(resourcesPath + '/mac/Info.plist', infoPlist, {\n      encoding: 'UTF8'\n    });\n  });\n\n  grunt.registerTask('createPlistFile', 'set node webkit and app relevant information to a new plist file', function() {\n    var metadata = grunt.file.readJSON('.yo-rc.json');\n    var resourcesPath = config.resources;\n    var nwExecuteable = 'nwjs';\n    if (metadata.nodeWebkitVersion.indexOf('v0.8.') === 0 || metadata.nodeWebkitVersion.indexOf('v0.9.') === 0 || metadata.nodeWebkitVersion.indexOf('v0.10.') === 0 || metadata.nodeWebkitVersion.indexOf('v0.11.') === 0) {\n      nwExecuteable = 'node-webkit';\n    }\n    var infoPlistTmp = grunt.file.read(resourcesPath + '/mac/Info.plist.tmp', {\n      encoding: 'UTF8'\n    });\n    var infoPlist = grunt.template.process(infoPlistTmp, {\n      data: {\n        nwExecutableName: nwExecuteable\n      }\n    });\n    grunt.file.write(resourcesPath + '/mac/Info.plist', infoPlist, {\n      encoding: 'UTF8'\n    });\n  })\n\n  grunt.registerTask('dist-linux', [\n    'jshint',\n    'clean:distLinux64',\n    'copy:appLinux',\n    'createLinuxApp:Linux64'\n  ]);\n\n  grunt.registerTask('dist-linux32', [\n    'jshint',\n    'clean:distLinux32',\n    'copy:appLinux32',\n    'createLinuxApp:Linux32'\n  ]);\n\n  grunt.registerTask('dist-win', [\n    'jshint',\n    'clean:distWin',\n    'copy:copyWinToTmp',\n    'compress:appToTmp',\n    'rename:zipToApp',\n    'createWindowsApp',\n    'compress:finalWindowsApp'\n  ]);\n\n  grunt.registerTask('dist-mac', [\n    'jshint',\n    'clean:distMac64',\n    'createPlistFile',\n    'copy:webkit64',\n    'copy:appMacos64',\n    'rename:macApp64',\n    'chmod64'\n  ]);\n\n  grunt.registerTask('dist-mac32', [\n    'jshint',\n    'clean:distMac32',\n    'createPlistFile',\n    'copy:webkit32',\n    'copy:appMacos32',\n    'rename:macApp32',\n    'chmod32'\n  ]);\n\n  grunt.registerTask('check', [\n    'jshint'\n  ]);\n\n  grunt.registerTask('dmg', 'Create dmg from previously created app folder in dist.', function () {\n    var done = this.async();\n    var createDmgCommand = 'resources/mac/package.sh \"<%= appName %>\"';\n    require('child_process').exec(createDmgCommand, function (error, stdout, stderr) {\n      var result = true;\n      if (stdout) {\n        grunt.log.write(stdout);\n      }\n      if (stderr) {\n        grunt.log.write(stderr);\n      }\n      if (error !== null) {\n        grunt.log.error(error);\n        result = false;\n      }\n      done(result);\n    });\n  });\n\n};\n"}